# Day 16

## Input

```elixir
sample = File.read!("#{__DIR__}/day16_sample.txt")
input = File.read!("#{__DIR__}/day16_input.txt")
```

## Part 1

```elixir
defmodule Aoc2023.Day16.Part1 do
  def trace(map, heads, traces) do
    width = map |> List.first() |> Enum.count()
    height = map |> Enum.count()

    next_heads =
      heads
      |> Enum.flat_map(fn {x, y, dir} ->
        case {map |> Enum.at(y) |> Enum.at(x), dir} do
          {".", :left} ->
            [{x - 1, y, :left}]

          {".", :right} ->
            [{x + 1, y, :right}]

          {".", :up} ->
            [{x, y - 1, :up}]

          {".", :down} ->
            [{x, y + 1, :down}]

          {"\\", :left} ->
            [{x, y - 1, :up}]

          {"\\", :right} ->
            [{x, y + 1, :down}]

          {"\\", :up} ->
            [{x - 1, y, :left}]

          {"\\", :down} ->
            [{x + 1, y, :right}]

          {"/", :left} ->
            [{x, y + 1, :down}]

          {"/", :right} ->
            [{x, y - 1, :up}]

          {"/", :up} ->
            [{x + 1, y, :right}]

          {"/", :down} ->
            [{x - 1, y, :left}]

          {"-", dir} when dir in [:left, :right] ->
            [{x + if(dir == :left, do: -1, else: 1), y, dir}]

          {"-", dir} when dir in [:up, :down] ->
            [{x - 1, y, :left}, {x + 1, y, :right}]

          {"|", dir} when dir in [:left, :right] ->
            [{x, y - 1, :up}, {x, y + 1, :down}]

          {"|", dir} when dir in [:up, :down] ->
            [{x, y + if(dir == :up, do: -1, else: 1), dir}]
        end
      end)
      |> Enum.filter(fn {x, y, _} = head ->
        valid = x >= 0 and x < width and y >= 0 and y < height
        new = head not in heads and head not in traces

        valid and new
      end)
      |> MapSet.new()

    new_heads = heads |> MapSet.union(next_heads)
    new_traces = traces |> MapSet.union(next_heads)

    if heads == new_heads and traces == new_traces do
      {map, traces}
    else
      trace(map, new_heads, new_traces)
    end
  end

  def energize(map, traces) do
    width = map |> List.first() |> Enum.count()
    height = map |> Enum.count()

    0..(height - 1)
    |> Enum.map(fn y ->
      0..(width - 1)
      |> Enum.map(fn x ->
        if traces
           |> Enum.any?(fn
             {^x, ^y, _} -> true
             _ -> false
           end) do
          "#"
        else
          "."
        end
      end)
    end)
  end

  def run(input) do
    {map, traces} =
      input
      |> String.split("\n", trim: true)
      |> Enum.map(fn row -> String.split(row, "", trim: true) end)
      |> trace(MapSet.new([{0, 0, :right}]), MapSet.new([{0, 0, :right}]))

    energize(map, traces)
    |> Enum.map(fn row -> row |> Enum.count(fn v -> v == "#" end) end)
    |> Enum.sum()
  end
end

Aoc2023.Day16.Part1.run(sample)
```

```elixir
Aoc2023.Day16.Part1.run(input)
```
